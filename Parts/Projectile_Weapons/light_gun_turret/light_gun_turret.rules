Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/LightGunTurret"
	IconNameKey = "Parts/LightGunTurretIcon"
	ID = ultranova.light_gun_turret
	OtherIDs = [ultranova.automated_armour_piercer]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/LightGunTurretDesc"
	Resources
	[
		[steel, 8]
		[coil, 10]
	]
	TypeCategories = [defense, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	Size = [1, 2]
	PhysicalRect = [0, 1, 1, 1]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 3000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 1
	AllowedDoorLocations
	[
		[0, 2]
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, BottomLeft, Left, TopRight, Right, BottomRight, Bottom]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight, Right]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [21.33, 42.66]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FirePrefToggle
		{
			Type = UIToggle
			ToggleID = "fire_pref"
			Default = 0
		}
		FirePrefAttack
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [0, 2]
		}
		FirePrefDefend
		{
			Type = ModeToggle
			Mode = FirePrefToggle
			OnModes = [1, 2]
		}
		AttackToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefAttack]
			Mode = All
		}
		DefendToggle
		{
			Type = MultiToggle
			Toggles = [AutoTargetToggle, FirePrefDefend]
			Mode = All
		}

		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = ActualAmmo
			LowColor = [255, 255, 0]
			HighColor = [255, 255, 0]
			FullColor = [255, 255, 0]
			MaxValue = 60
			Height = 10
		}

		LoadedAmmo
		{
			Type = ResourceStorage
			ResourceType = bullet_box
			MaxResources = 1
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoDeliver
		}
		CanILoad
		{
			Type = ToggledComponents
			Toggle = AmmoMultiToggle
			Components
			{
				LoadedAmmoConsumer
				{
					Type = ResourceConsumer
					ResourceType = bullet_box
					Storage = LoadedAmmo
					ResupplyThreshold = 1
					DefaultPriority = &/PRIORITIES/Defense_Supply
					OperationalToggle = PowerToggle
				}
			}
		}
		
		AmmoSplitter
		{
		    Type = ResourceConverter
		    ResourceType = bullet_box
		    FromStorage = LoadedAmmo
		    FromQuantity = 1
		    ToStorage = ActualAmmo
		    ToQuantity = 80
		    Interval = 0.1
		}

		ActualAmmo
		{
			Type = ResourceStorage
			ResourceType = bullet_box
			MaxResources = 80
			StartingResources = 0
			InitToMaxResources = 0
		}

		AmmoSpriteToggle
		{
			Type = ThresholdToggle
			AmountFrom = ActualAmmo
			MinAmount = 0
			MaxAmount = 8/80
		}

		AmmoMultiToggle
		{
			Type = MultiToggle
			Toggles = [
				PowerToggle, 
				{ Toggle=ActualAmmo; Invert=true}
			]
			Mode = All
		}

		External_Walls_Graphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			Walls
			{
				Layer = "external_walls"
				DamageLevels
				[
					{
						File = "external_walls.png"
						NormalsFile = "external_walls_normals.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/walls/roof04.png"
						NormalsFile = "./Data/ships/terran/walls/roof_normals04.png"
						MirrorV = true
						Size = [1, 1]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
						Offset = [0, 0.5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/point_defense/roof.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals.png"
						Offset = [0, 0.5]
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/roof_33.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals_33.png"
						Offset = [0, 0.5]
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/point_defense/roof_66.png"
						NormalsFile = "./Data/ships/terran/point_defense/roof_normals_66.png"
						Offset = [0, 0.5]
						Size = [1, 1]
					}
				]
			}
		}

		CrewLocation
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-0.6875, 0]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			CrewDestinations
			[
				[0.5, 1.6875]
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		Turret
		{
			Type = TurretWeapon
			Location = [.5, 1]//Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0.15
			FiringArc = 40d
			RotateSpeed = 40d
			FireThresholdAngle = 1d
			AIFirepowerRating = 150
			Emitter = BulletEmitter
			TargetSearchesPerSecond = 4 // Default is 2.
			HoldTargetAfterCancel = .5
			TargetPathThickness = .2// &../BulletEmitter/Bullet/Components/Physics/Radius
			EstimateFirepowerToggle = AttackToggle
			FirePermissionToggle = FireModeToggle
			AutoTargetCrewSafetyDist = 8

			AutoTargets
			[
				{
					TargetType = Bullets
					BulletTargetCategories = [missile, mine, bullet]
					Toggle = DefendToggle
				}
				{
					TargetType = ShipParts
					Toggle = AttackToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [1.15, 0]
			OperationalToggle = IsOperational
			Bullet = &<bullet/bullet.rules>
			Spread = [-1d, 1d]
			ResourceStorage = ActualAmmo
			ResourcesUsed = 1
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitter
			Trigger = BulletEmitter
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./Data/ships/terran/point_defense/particles/point_defense_shoot.rules>
				&<./Data/ships/terran/point_defense/particles/point_defense_shoot_flash.rules>


				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = .5
					MaxConcurrent = 20
				}
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Rotation = 90d
			OperationalToggle = IsOperational
			Walls
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "gun.png"
						NormalsFile = "gun_normals.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [1, 1]
						OffSet = [0, .5]
					}
				]
			}
		}

		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			OperationalToggle = IsOperational
			Location = [-.5, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"eject_bullet1.png"
					"eject_bullet2.png"
					"./Data/ships/common/empty_sprite.png"// Loop back to beginning and clamp there.
				]
				Size = [1, 1]
				AnimationInterval = 0.05
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		AmmoBoxGraphicsFullComponents
		{
			Type = ToggledComponents
			Toggle = AmmoSpriteToggle
			Invert = true
			Components
			{
				AmmoBoxGraphicsFull
				{
					Type = Sprite
					ChainedTo = Turret
					Location = [0, 0]
					Rotation = 90d
					ResetAnimationTrigger = Turret
					Layer = "turrets"
					AtlasSprite
					{
						AnimationFiles
						[
							"ammo_full1.png"
							"ammo_full2.png"
							"ammo_full3.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.033
						ClampAnimation = true
					}			
				}
			}
		}

		
		AmmoBoxGraphicsEmptying
		{
			Type = ResourceSprites
			ChainedTo = Turret
			Location = [0, 0]
			ResourceStorage = ActualAmmo
			Rotation = 90d
			RangeLow = 0
			RangeHigh = 9
			Layer = "floors"
			ResetAnimationTrigger = Turret
			ResourceLevels
			[
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying1a.png"
						"ammo_emptying/ammo_emptying1b.png"
						"ammo_emptying/ammo_emptying1c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying2a.png"
						"ammo_emptying/ammo_emptying2b.png"
						"ammo_emptying/ammo_emptying2c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying3a.png"
						"ammo_emptying/ammo_emptying3b.png"
						"ammo_emptying/ammo_emptying3c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying4a.png"
						"ammo_emptying/ammo_emptying4b.png"
						"ammo_emptying/ammo_emptying4c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying5a.png"
						"ammo_emptying/ammo_emptying5b.png"
						"ammo_emptying/ammo_emptying5c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying6a.png"
						"ammo_emptying/ammo_emptying6b.png"
						"ammo_emptying/ammo_emptying6c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_emptying/ammo_emptying7a.png"
						"ammo_emptying/ammo_emptying7b.png"
						"ammo_emptying/ammo_emptying7c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"ammo_full1.png"
						"ammo_full2.png"
						"ammo_emptying/ammo_emptying8c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
				//Copied again for fun and also to fix an animation error
				{
					AnimationFiles
					[
						"ammo_full1.png"
						"ammo_full2.png"
						"ammo_emptying/ammo_emptying8c.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.033
					ClampAnimation = true
				}
			]
		}

		

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				/*
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				*/
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/PDShot"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShotDamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitBullet/HitEffects/0/Damage
				ShotDamagePerSecond = (&ShotDamagePerShot) * (&ROF)
				ShotDamage = [&../ShotDamagePerShot, &../ShotDamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = deg(&~/Part/Components/BulletEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				AmmoPerShot = &~/Part/Components/BulletEmitter/ResourcesUsed
				AmmoPerSecond = (&AmmoPerShot) * (&ROF)
				ShotAmmoUsage = [&../AmmoPerShot, &../AmmoPerSecond]
			}
		}
	]
}