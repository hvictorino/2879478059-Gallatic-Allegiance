Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/RocketFactory"
	IconNameKey = "Parts/RocketFactoryIcon"
	ID = ultranova.rocket_factory_modern
	//OtherIDs = [ultranova.smallmissile_factory, ultrablast.smallmissile_factory]
	DescriptionKey = "Parts/RocketFactoryDesc"
	EditorGroup = "Production"
	Resources
	[
		[steel, 60]
		[coil2, 20]
		[processor, 1]
	]
	Size = [3, 2]
	IsFlippable = true
	SelectionPriority = 1
	MaxHealth = 6000
	TypeCategories = [provides_rockets, provides_launcher_parts, uses_iron, uses_sulfur, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [Factory]
	BlockedTravelCells
	[
		[1, 0]
	]
	ForceManhattanPathInPart = true
	AllowedDoorLocations
	[
		[-1, 1]
		[0, 2]
		[1, 2]
		[2, 2]
		[3, 1]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 48]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, IronSplitter, SulfurSplitter]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		IronStorage
		{
			Type = TypedResourceGrid
			ResourceType = iron
			GridRect = [0, 0, 1, 1]
			Layer = "doodads_low"
			SpriteInset = [17/64, 9/64, 5/64, 5/64]
		}
		IronConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = iron
			Storage = IronStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		IronSplitter
		{
			Type = InlineResourceConverter
			ResourceType = iron
			FromStorage = IronStorage
			FromQuantity = 1
			ToQuantity = 30
		}

		SulfurStorage
		{
			Type = TypedResourceGrid
			ResourceType = sulfur
			GridRect = [2, 0, 1, 1]
			Layer = "doodads_low"
			SpriteInset = [5/64, 9/64, 17/64, 5/64]
		}
		SulfurConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = sulfur
			Storage = SulfurStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		SulfurSplitter
		{
			Type = InlineResourceConverter
			ResourceType = sulfur
			FromStorage = SulfurStorage
			FromQuantity = 1
			ToQuantity = 30
		}

		RocketStorage
		{
			Type = TypedResourceGrid
			ResourceType = rocket_part
			GridRect = [0, 1, 3, 1]
			Layer = "doodads_low"
			SpriteInset = [9/64, 6/64, 9/64, 16/64]
			SuppliesResources = true
			SupplyToggleButtonOffset = [0, -.4]
			DisableCells
			[
				[1, 0]
			]
			InitToMaxResources = 0
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		ResourceConverter
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			From
			[
			    {
			        Storage = IronSplitter
			        Quantity = 1
			    }
			    {
			        Storage = SulfurSplitter
			        Quantity = 1
			    }
			    {
			        Storage = BatteryStorage
			        Quantity = 100
			        MinQuantityForConversion = 1
			    }
			]
			ToStorage = RocketStorage
			ToQuantity = 1
			Interval = { BaseValue=.25; BuffType=Factory; BuffMode=Divide; }
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ResourceConverter
			Location = [1.5, 1.5]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./data/ships/terran/factory_ammo/bullet_create.wav"
					Volume = .1
					Speed = .6
					SpeedVariation = .05
				}
			]
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = BatteryStorage
		}

		IronSprites
		{
			Type = ResourceSprites
			Location = [0.5+15/64, 0.5-2/64]
			ResourceStorage = IronSplitter
			Layer = "doodads_high"
			Modulus = &../IronSplitter/ToQuantity
			AnimationToggle = ResourceConverter
			ResourceLevels = &<./Data/ships/terran/factory_he/factory_he.rules>/Part/Components/IronSprites/ResourceLevels
		}

		SulfurSprites
		{
			Type = ResourceSprites
			Location = [2.5-17/64, 0.5-2/64]
			ResourceStorage = SulfurSplitter
			Layer = "doodads_high"
			Modulus = &../SulfurSplitter/ToQuantity
			AnimationToggle = ResourceConverter
			ResourceLevels = &<./Data/ships/terran/factory_he/factory_he.rules>/Part/Components/SulfurSprites/ResourceLevels
		}

		FloorSprite
		{
			Type = Sprite
			OnlyWithFlip = false
			Location = [1.5, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor1.png"
					Size = [3, 2]
				}
				{
					File = "floor2.png"
					Size = [3, 2]
				}
				{
					File = "floor3.png"
					Size = [3, 2]
				}
			]
		}

		FloorSpriteFlipped
		{
			Type = Sprite
			OnlyWithFlip = true
			Location = [1.5, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor_f1.png"
					Size = [3, 2]
				}
				{
					File = "floor_f2.png"
					Size = [3, 2]
				}
				{
					File = "floor_f3.png"
					Size = [3, 2]
				}
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1]
			OperationalToggle = IsOperational
			//AnimationToggle = ResourceConverter
			DoodadToggle = ResourceConverter
			ToggleOnDoodad
			{
				Layer = "doors"//insanity
				//Offset = [0, -.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"on1.png"
							"on2.png"
							"on3.png"
							"on4.png"
							"on5.png"
							"on6.png"
							"on7.png"
							"on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "doors"//insanity
				//Offset = [0, -1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"idle1.png"
							"idle2.png"
							"idle3.png"
							"idle2.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
						AnimationStartTime = WhenSpawned
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doors"//insanity
				//Offset = [0, -1]
				DamageLevels
				[
					{
						File = "off.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls1.png"
						Size = [3, 2]
					}
					{
						File = "walls2.png"
						Size = [3, 2]
					}
					{
						File = "walls3.png"
						Size = [3, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof1.png"
						NormalsFile = "roof_n1.png"
						Size = [3, 2]
					}
					{
						File = "roof2.png"
						NormalsFile = "roof_n2.png"
						Size = [3, 2]
					}
					{
						File = "roof3.png"
						NormalsFile = "roof_n3.png"
						Size = [3, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "roof_glow.png"
						Size = [3, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 3/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [4, 4]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [3, 1]
					//OffSet = [-1, 0]
				}
				{
					File = "batteries2.png"
					Size = [3, 1]
					//OffSet = [-0.5, 0]
				}
				{
					File = "batteries3.png"
					Size = [3, 1]
				}
				{
					File = "batteries4.png"
					Size = [3, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 1]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 44500
					Radius = 4
					Delay = .05
					FireChancePerNDamage = 100%
					NDamage = 1000
					CrewKillChance = 50%
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 20000
					Radius = 4
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
						Crew = false
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// No iron.
				{
					Toggle = IronSplitter
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// No sulfur.
				{
					Toggle = SulfurSplitter
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			OnlyWithFlip = false
			File = "blueprint1.png"
			Size = [3, 2]
		}

		BlueprintsFlipped
		{
			Type = BlueprintSprite
			OnlyWithFlip = true
			File = "blueprint2.png"
			Size = [3, 2]
		}
	}

	Stats
	{
		MissileProduction = (&~/Part/Components/ResourceConverter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		PartCapacity = (&~/Part/Components/RocketStorage/GridRect/2) * (&~/Part/Components/RocketStorage/GridRect/3) * (&<../../../Resources/rocket/rocket.rules>/MaxStackSize)
		MissilePartCapacity = [&../PartCapacity, (&../PartCapacity)]
		IronCapacity = (&~/Part/Components/IronStorage/GridRect/2) * (&~/Part/Components/IronStorage/GridRect/3) * (&<./Data/resources/iron/iron.rules>/MaxStackSize)
		IronPerMissile = (&~/Part/Components/IronSplitter/FromQuantity) / (&~/Part/Components/IronSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		IronPerSecond = (&~/Part/Components/IronSplitter/FromQuantity) / (&~/Part/Components/IronSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		MissileIronUsage = [&../IronPerMissile, &../IronPerSecond]
		SulfurCapacity = (&~/Part/Components/SulfurStorage/GridRect/2) * (&~/Part/Components/SulfurStorage/GridRect/3) * (&<./Data/resources/sulfur/sulfur.rules>/MaxStackSize)
		SulfurPerMissile = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		SulfurPerSecond = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		MissileSulfurUsage = [&../SulfurPerMissile, &../SulfurPerSecond]
		PowerPerMissile = (&~/Part/Components/ResourceConverter/From/2/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		PowerPerSecond = (&~/Part/Components/ResourceConverter/From/2/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue) / 1000
		MissilePowerUsage = [&../PowerPerMissile, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}