Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/MissileSilo"
	IconNameKey = "Parts/MissileSiloIcon"
	ID = ultranova.missile_silo
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/MissileSiloDesc"
	Resources
	[
		[steel, 60]
		[coil2, 20]
		[processor, 1]
	]
	Size = [2, 3]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 6000
	TypeCategories = [weapon, uses_missiles, uses_launcher_parts, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
	]
	ForceManhattanPathInPart = true
	BlockedTravelCellDirections
	[
		{
			Key = [0, 2]
			Value = [Right]
		}
		{
			Key = [1, 2]
			Value = [Left]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [46, 69]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 5
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		MissileType
		{
			Type = UIToggle
			ToggleID = "missile_type"
			Default = 0
			AlwaysAllowInBuildMode = true
			AvailableChoices = [0]
		}

		HEMissilesToggle
		{
			Type = ModeToggle
			Mode = MissileType
			OnMode = 0
		}
		HEMissilesComponents
		{
			Type = ToggledComponents
			Toggle = HEMissilesToggle
			IncludeInBlueprints = true
			Components
			{
				LauncherGraphics
				{
					Type = Graphics
					Location = [1, 1.5]
					OperationalToggle = IsOperational
					Floor
					{
						Layer = "floors"
						DamageLevels
						[
							{
								File = "floor.png"
								Size = [2, 3]
							}
						]
					}
				}

				MissileStorageA : ~/MissileStorageBase
				{
					// Nothing different.
				}

				MissileStorageB : ~/MissileStorageBase
				{
					// Nothing different.
				}

				MissileStorageC : ~/MissileStorageBase
				{
					// Nothing different.
				}

				CombinedMissileStorage
				{
					Type = MultiResourceStorage
					ResourceType = missile_part_he
					ResourceStorages = [MissileStorageA, MissileStorageB, MissileStorageC]
					AddMode = PrioritizeLeastEmptyCapacity
					RemoveMode = PrioritizeMostEmptyCapacity
					ReceiveResourceMediaEffects = &/COMMON_EFFECTS/MissileLoad
					UITileRect = [.5 + 7/64, 1 + 7/64, 1 - 14/64, 1 - 14/64]
				}

				Consumer
				{
					Type = ResourceConsumer
					ResourceType = missile_part_he
					Storage = CombinedMissileStorage
					DefaultPriority = &/PRIORITIES/Weapon_Supply
					OverridePriorityKey = MissileStorage
					OperationalToggle = PowerToggle
					ConsumptionToggleButtonOffset = [0, -.4]
				}

				MissilesPrereq
				{
					Type = MultiToggle
					Toggles = [MissileStorageA, MissileStorageB, MissileStorageC]
					Mode = Any
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = CommonReloadTimerShort
					Invert = true
				}

				WeaponA : ~/WeaponBase
				{
					Location = [.5 + 2/64, 0.625]
					ShowExplicitTarget = false
					Emitter = EmitterA
				}

				EmitterA : ~/EmitterBase
				{
					ChainedTo = WeaponA
					FireTrigger = WeaponA
					GetTargetFrom = WeaponA
					ResourceStorage = MissileStorageA
				}

				WeaponB : ~/WeaponBase
				{
					Location = [1, 0.625]
					Emitter = EmitterB

					CoverageSectorArc
					{
						Texture = &/INDICATORS/VerticalGradient
						VertexColor = [255, 255, 255, 51]
						QuadCount = 64
					}
				}

				EmitterB : ~/EmitterBase
				{
					ChainedTo = WeaponB
					FireTrigger = WeaponB
					GetTargetFrom = WeaponB
					ResourceStorage = MissileStorageB
				}

				WeaponC : ~/WeaponBase
				{
					Location = [1.5 - 2/64, 0.625]
					ShowExplicitTarget = false
					Emitter = EmitterC
				}

				EmitterC : ~/EmitterBase
				{
					ChainedTo = WeaponC
					FireTrigger = WeaponC
					GetTargetFrom = WeaponC
					ResourceStorage = MissileStorageC
				}

				FirePermissionToggle
				{
					Type = MultiToggle
					Toggles = [CommonReloadTimerShort, FireModeToggle]
					Mode = All
				}

				CommonReloadResetTrigger
				{
					Type = MultiTrigger
					Triggers = [WeaponA, WeaponB, WeaponC]
				}

				LaunchEffectA : ~/LaunchEffectBase
				{
					ChainedTo = WeaponA
					Trigger = EmitterA
				}

				MissileSiloDoorA
				{
					Type = Sprite
					Location = [.5 + 2/64, 0.625]
					Layer = "roofs"
					ResetAnimationTrigger = WeaponA
					AtlasSprite
					{
						AnimationFiles
						[
							//"door1.png"
							"door2.png"
							"door3.png"
							"door4.png"
							"door5.png"
							"door6.png"
							"door7.png"
							"door7.png"
							"door7.png"
							"door6.png"
							"door5.png"
							"door4.png"
							"door3.png"
							"door2.png"
							"door1.png"
						]
						NormalsAnimationFiles
						[
							//"door_normals1.png"
							"door_normals2.png"
							"door_normals3.png"
							"door_normals4.png"
							"door_normals5.png"
							"door_normals6.png"
							"door_normals7.png"
							"door_normals7.png"
							"door_normals7.png"
							"door_normals6.png"
							"door_normals5.png"
							"door_normals4.png"
							"door_normals3.png"
							"door_normals2.png"
							"door_normals1.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
				}

				LaunchEffectB : ~/LaunchEffectBase
				{
					ChainedTo = WeaponB
					Trigger = EmitterB
				}

				MissileSiloDoorB : &MissileSiloDoorA
				{
					Type = Sprite
					Location = [1, 0.625]
					Layer = "roofs"
					ResetAnimationTrigger = WeaponB
				}

				MissileSiloDoorC : &MissileSiloDoorA
				{
					Type = Sprite
					Location = [1.5 - 2/64, 0.625]
					Layer = "roofs"
					ResetAnimationTrigger = WeaponC
				}

				LaunchEffectC : ~/LaunchEffectBase
				{
					ChainedTo = WeaponC
					Trigger = EmitterC
				}

				MissileSpritesA
				{
					Type = ResourceSprites
					Location = [.5 + 2/64, 1]
					ResourceStorage = MissileStorageA
					Layer = "weapons"
					HasZeroResourceSprite = true
					ResourceLevels
					[
						{
							File = "missile_0.png"
							Size = [1, 2]
						}
						{
							File = "missile_1.png"
							Size = [1, 2]
						}
						{
							File = "missile_2.png"
							Size = [1, 2]
						}
						{
							File = "missile_3.png"
							Size = [1, 2]
						}
						{
							File = "missile_4.png"
							Size = [1, 2]
						}
					]
				}

				MissileSpritesB : MissileSpritesA
				{
					Location = [1, 1]
					ResourceStorage = MissileStorageB
				}

				MissileSpritesC : MissileSpritesB
				{
					Location = [1.5 - 2/64, 1]
					ResourceStorage = MissileStorageC
				}

				DestroyedEffects
				{
					Type = DeathEffects
					MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
					Location = [1, 2]

					FactorHitEffectsWith = CombinedMissileStorage
					HitEffects
					[
						{
							Type = ExplosiveDamage
							TotalDamage = 30000
							Radius = 5
							Delay = .05
							FireChancePerNDamage = 50%
							NDamage = 1000
							CrewKillChance = 50%
							Filter
							{
								OperationalHealth = true
								StructuralHealth = false
								Friendlies = true
							}
						}
						{
							Type = ExplosiveDamage
							TotalDamage = 10000
							Radius = 4
							Delay = .05
							Filter
							{
								OperationalHealth = false
								StructuralHealth = true
								Friendlies = true
								Crew = false
							}
						}
					]
				}

				Indicators
				{
					Type = IndicatorSprites
					Location = [1, 2]
					Layer = "indicators"
					Indicators
					[
						// Turned off.
						{
							Toggle = PowerToggle
							AtlasSprite
							{
								File = &/INDICATORS/PowerOff
								Size = [1, 1]
							}
						}

						// Out of missiles.
						{
							Toggle = MissilesPrereq
							Delay = &~/Part/Components/CommonReloadTimerShort/Duration
							AtlasSprite
							{
								File = &/INDICATORS/NoMissiles
								Size = [1, 1]
							}
						}

						// No crew.
						{
							Toggle = PartCrew
							AtlasSprite
							{
								File = &/INDICATORS/NoCrew
								Size = [1, 1]
							}
						}
					]
				}
			}
		}

		CommonReloadTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerMed
		{
			Type = Timer
			Duration = 6
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerLong
		{
			Type = Timer
			Duration = 10
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		MissilesPrereqProxy
		{
			Type = ToggleProxy
			ComponentID = MissilesPrereq
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.54, 2.44]
			Rotation = -135d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.46, 2.44]
			Rotation = 135d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [MissilesPrereqProxy]
			CrewDestinations
			[
				[ .5, 2.44]
				[1.5, 2.44]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "./Data/ships/terran/missile_launcher/floor.png"
						Size = [2, 2]
					}
					{
						File = "./Data/ships/terran/missile_launcher/floor_33.png"
						Size = [2, 2]
					}
					{
						File = "./Data/ships/terran/missile_launcher/floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"./Data/ships/terran/missile_launcher/doodads_on1.png"
							"./Data/ships/terran/missile_launcher/doodads_on2.png"
							"./Data/ships/terran/missile_launcher/doodads_on3.png"
							"./Data/ships/terran/missile_launcher/doodads_on4.png"
							"./Data/ships/terran/missile_launcher/doodads_on5.png"
							"./Data/ships/terran/missile_launcher/doodads_on6.png"
							"./Data/ships/terran/missile_launcher/doodads_on7.png"
							"./Data/ships/terran/missile_launcher/doodads_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"./Data/ships/terran/missile_launcher/doodads_on1_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on2_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on3_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on4_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on5_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on6_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on7_33.png"
							"./Data/ships/terran/missile_launcher/doodads_on8_33.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"./Data/ships/terran/missile_launcher/doodads_on1_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on2_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on3_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on4_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on5_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on6_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on7_66.png"
							"./Data/ships/terran/missile_launcher/doodads_on8_66.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "./Data/ships/terran/missile_launcher/doodads_off.png"
						Size = [2, 1]
					}
					{
						File = "./Data/ships/terran/missile_launcher/doodads_off_33.png"
						Size = [2, 1]
					}
					{
						File = "./Data/ships/terran/missile_launcher/doodads_off_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "./Data/ships/terran/missile_launcher/lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "./Data/ships/terran/missile_launcher/walls.png"
						Size = [2, 2]
					}
					{
						File = "./Data/ships/terran/missile_launcher/walls_33.png"
						Size = [2, 2]
					}
					{
						File = "./Data/ships/terran/missile_launcher/walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/missile_launcher/roof_glows.png"
						Size = [2, 1]
					}
					{
						File = "./Data/ships/terran/missile_launcher/roof_glows_33.png"
						Size = [2, 1]
					}
					{
						File = "./Data/ships/terran/missile_launcher/roof_glows_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 0.67]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3.5, 3.5]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		BlueprintsHE
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		HEMissileCapacity = 3

		RecCrew = (&CrewRequired) + (&~/MissileStats/Stats/ROF) * (&~/MissileStats/Stats/MissileParts) * 4
	}

	StatsNotesKey = "Stats/MissileLauncherNotes"
}

MissileStorageBase
{
	Type = ResourceStorage
	ResourceType = missile_part_he
	MaxResources = 4
	ToggleOnResources = 4
	ToggleOffResources = 3
	DelayBeforeReadyToUse = .5
	DropResourcesWhenDestroyed = true
}

WeaponBase
{
	Type = TurretWeapon // This has an arc of 0, but we don't want to use FixedWeapon because that will only shoot at things directly in the LOS.
	Rotation = -90d
	OperationalToggle = IsOperational
	AutoFireToggle = AutoFireToggle
	FireInterval = 0 // Uses common reload timer.
	FiringArc = 0d;
	ValidArc = 360d;
	FireThresholdAngle = 180d;
	RotateSpeed = 0d
	IgnoreSourceShipLowLOSChecks = true
	AIFirepowerRating = 1600
	FirePermissionToggle = FirePermissionToggle

	AutoTargets
	[
		{
			TargetType = ShipParts
			Toggle = AutoTargetToggle
			EnableInDirectControlMode = true
		}
	]
}

EmitterBase
{
	Type = BulletEmitter
	OperationalToggle = IsOperational
	Location = [.5, 0]
	ResourcesUsed = 4
	Bullet : &<./Data/shots/missile_he/missile_he.rules>
	{
		ID = "ultranova.missile_roof_he"
		OtherIDs = ["ultranova.roof_missile_he"]
		Components : ^/0/Components
		{
			Sprite: ^/0/Sprite
			{
				RenderBucket = BulletUpper1
			}

			HELightsSprite: ^/0/HELightsSprite
			{
				RenderBucket = BulletUpper2
			}

			Hit : ^/0/Hit
			{
				SourceShipLowCollisions = false
			}
		}
	}
	TargetLeadPrediction = false
	FireDelay = .6
	Recoil = 50
}

LaunchEffectBase
{
	Type = TriggeredEffects

	MediaEffects
	[
		:<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot.rules>
		{
			Bucket = Upper1
		}
		:<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>
		{
			Bucket = Upper2
		}

		: /BASE_SOUNDS/AudioExterior
		{
			Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
			SpeedVariation = .25
		}
	]
}

MissileStats = &<./Data/ships/terran/missile_launcher/he/missile_launcher_he.rules>/MissileStats