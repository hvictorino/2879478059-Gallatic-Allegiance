Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/ParticleCannonSmallLoader"
	IconNameKey = "Parts/ParticleCannonSmallLoaderIcon"
	ID = ultranova.small_particle_c_loader
	OtherIDs = [ultranova.federation_particle_cannon_loader]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/ParticleCannonSmallLoaderDesc"
	Resources
	[
		[steel, 20]
		[coil2, 5]
		[tristeel, 5]
	]
	TypeCategories = [weapon, uses_power, is_crewed, particle_cannon]
	Size = [1, 2]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 2000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ReceivableBuffs = [ParticleCannonReverseOperational]
	AllowedDoorLocations
	[
		[-1, 1]
		[1, 1]
		[0, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		BuffOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew, ParticleCannonReverseOperationBuffToggle]
			Mode = All
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [BuffOperational, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		ParticleCannonReverseOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = ParticleCannonReverseOperational
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 6000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		LoadedAmmo
		{
			Type = ResourceStorage
			ResourceType = bullet
			MaxResources = 2
			DelayBeforeReadyToUse = .25
			AnticipateMoreResourcesFrom = [AmmoStorage]
			ToggleOnResources = 2
			ToggleOffResources = 1
		}

		AmmoStorage
		{
			Type = ResourceStorage
			ResourceType = bullet
			MaxResources = 4
		}
		AmmoConsumer
		{
			Type = ResourceConsumer
			ResourceType = bullet
			Storage = AmmoStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		ResourcePrereq
		{
			Type = MultiResourceStorage
			ResourceType = bullet
			ResourceStorages = [LoadedAmmo, AmmoStorage]
			ToggleOnResource = 2
			ToggleOffResource = 1
		}

		WaitForTheOne //This component makes sure that the front loader waits until there is more than one battery.
		{
			Type = ThresholdToggle
			AmountFrom = BatteryStorage
			MinAmount = 1.1 / 6
		}

		AmmoLoader
		{
			Type = ResourceConverter
			OperationalToggle = WaitForTheOne
			FromStorage = AmmoStorage
			ToStorage = LoadedAmmo
			FromQuantity = 1
			ToQuantity = 1
			Interval = .25
		}

		LoadEffects
		{
			Type = TriggeredEffects
			Trigger = AmmoLoader
			MediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}

		ParticleCannonBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = ParticleCannonBuff
			BuffAmount = 0
			BuffArea = [0, -1, 1, 1]
			Criteria
			{
				Rot = 0
				Left = 0
				Right = 1
				Bottom = 0
			}
		}

		OperationBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = ParticleCannonOperational
			BuffArea = [0, -1, 1, 1]
			OperationalToggle = BuffOperational
			Criteria
			{
				Rot = 0
				Left = 0
				Right = 1
				Bottom = 0
			}
		}

		ForwardPower
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [0, -1]
			PartCriteria
			{
				Category = particle_cannon_barrel
				Rot = 0
				Left = 0
				Right = 1
				Bottom = 0
			}
			ComponentID = BatteryStorage
		}

		ForwardLoader
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			ToStorage = ForwardPower
			FromQuantity = 1000
			ToQuantity = 1000
			Interval = .25
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -.75]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [2, 2]
						Z = .5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 1.65625]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [BatteryStorage, PowerToggle]
			HighPriorityPrerequisites = [AmmoStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		BatterySprite1
		{
			Type = ResourceSprites
			Location = [.5, 0.4375]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			RangeLow = 0
			RangeHigh = 3000
			ResourceLevels
			[
				{
					File = "extender_batteries1.png"
					Size = [1, 1]
				}
				{
					File = "extender_batteries2.png"
					Size = [1, 1]
				}
				{
					File = "extender_batteries3.png"
					Size = [1, 1]
				}
			]
		}
		BatterySprite2
		{
			Type = ResourceSprites
			Location = [.5, 0.4375]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			RangeLow = 3001
			RangeHigh = 6000
			ResourceLevels
			[
				{
					File = "extender_batteries1.png"
					MirrorU = true
					Size = [1, 1]
				}
				{
					File = "extender_batteries2.png"
					MirrorU = true
					Size = [1, 1]
				}
				{
					File = "extender_batteries3.png"
					MirrorU = true
					Size = [1, 1]
				}
			]
		}

		LoadedAmmoSprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = LoadedAmmo
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "bullets1.png"
					Size = [1, 2]
				}
				{
					File = "bullets2.png"
					Size = [1, 2]
				}
			]
		}
		ResourceSprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = AmmoStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "bullets3.png"
					Size = [1, 1]
				}
				{
					File = "bullets4.png"
					Size = [1, 1]
				}
				{
					File = "bullets5.png"
					Size = [1, 1]
				}
				{
					File = "bullets6.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// Out of Resource.
				{
					Toggle = AmmoStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoAmmo
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints_loader.png"
			Size = [1, 2]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		ResourceCapacity = (&~/Part/Components/AmmoStorage/MaxResources) + (&~/Part/Components/LoadedAmmo/MaxResources)

		RecPower = &<particle_cannon_barrel.rules>/Part/StatsByCategory/0/Stats/PowerPerSecond
		RecResource = &<particle_cannon_barrel.rules>/Part/StatsByCategory/0/Stats/AmmoPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}
