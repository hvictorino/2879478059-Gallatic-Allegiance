Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/RocketTurretSmall"
	IconNameKey = "Parts/RocketTurretSmallIcon"
	ID = ultranova.rocket_turret_small
	OtherIDs = [ultranova.roof_rocket_launcher]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/RocketTurretSmallDesc"
	Resources
	[
		[steel, 80]
		[coil2, 30]
		[processor, 1]
	]
	TypeCategories = [weapon, uses_rockets, uses_launcher_parts, is_crewed]
	Size = [3, 3]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 9000
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	ProhibitRects
	[
		//Top
		[tall, [-1, -1, 5, 1]]
		//Sides
		[tall, [-1, 0, 1, 3]]
		[tall, [3, 0, 1, 3]]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	AllowedDoorLocations
	[
		//Left
		[-1, 1]
		[-1, 2]
		//Bottom
		[0, 3]
		[1, 3]
		[2, 3]
		//Right
		[3, 1]
		[3, 2]
	]
	BlockedTravelCells
	[
		[1, 1]
	]
	ForceManhattanPathInPart = true
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6
		}

		//Storages
		LoadedRockets
		{
			Type = ResourceStorage
			ResourceType = rocket_part
			MaxResources = 8
			AnticipateMoreResourcesFrom = ["RocketStorage"]
			UITileRect = [1 + 7/64, 1.25 + 7/64, 1 - 14/64, 1 - 14/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
			DropResourcesWhenDestroyed = true
		}

		RocketStorage
		{
			Type = TypedResourceGrid
			ResourceType = rocket_part
			GridRect = [0, 0, 3, 1]
			DisableCells
			[
				[1, 0]
			]
			Layer = "doodads_low"
			SpriteInset = [8/64, 11/64, 8/64, 8/64]
		}
		RocketConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = rocket_part
			Storage = RocketStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			AdditionalStorageForJobPriority = [LoadedRockets]
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}

		//Rocket types
		RocketType
		{
			Type = UIToggle
			ToggleID = "rocket_type"
			AvailableChoices = [0, 2] //Only regular and micro
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		HERocketToggle
		{
			Type = ModeToggle
			Mode = RocketType
			OnMode = 0
		}

		MicroRocketToggle
		{
			Type = ModeToggle
			Mode = RocketType
			OnMode = 2
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 3]
					}
					{
						File = "floor_33.png"
						Size = [3, 3]
					}
					{
						File = "floor_66.png"
						Size = [3, 3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 3]
					}
				]
			}
		}

		TurretCollider
		{
			Type = CircleCollider
			Location = &../Turret/Location
			Radius = 1
			IsHigh = true
		}

		//Turret components
		Turret
		{
			Type = TurretWeapon
			Location = [1.5, 1.5]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			FireInterval = 0 // Uses separate fire timer.
			FiringArc = 270d
			RotateSpeed = 70d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 600
			AutoFireToggle = AutoFireToggle
			IgnoreFriendlyShipLowLOSChecks = true
			Emitter = BulletEmitterBase
			FirePermissionToggle = FirePermissionToggle

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
			
			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]
		}

		FireTimerProxy
		{
			Type = ToggleProxy
			ComponentID = FireTimer
		}
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [FireTimerProxy, FireModeToggle]
			Mode = All
		}

		// Components for non-optional alternating fire.
		ShootCycle
		{
			Type = ModeCycle
			ModeRange = [0, 1]
			IncrementTrigger = Turret
			StartingMode = 1 // First shot will switch to mode 0.
		}

		ShootLeftTrigger
		{
			Type = ModeTrigger
			Mode = ShootCycle
			TriggerInModes = [0]
		}

		ShootRightTrigger
		{
			Type = ModeTrigger
			Mode = ShootCycle
			TriggerInModes = [1]
		}
		// -----------------------------------------------------

		BulletEmitterBase
		{
			Type = BulletEmitter
			Location = [1, 0]
			ChainedTo = Turret
			FireTrigger//This won't shoot but this field is not optional.
			GetTargetFrom = Turret
			OperationalToggle = IsOperational
			Bullet = &<rocket/rocket.rules>
			ResourceStorage = LoadedRockets
			ResourcesUsed = 2
			Recoil = 80
		}

		HERocketComponents
		{
			Type = ToggledComponents
			Toggle = HERocketToggle
			IncludeInBlueprints = true
			Components
			{
				RocketLoader
				{
					Type = ResourceConverter
					FromStorage = RocketStorage
					ToStorage = LoadedRockets
					FromQuantity = 1
					ToQuantity = 1
					Interval = .15
				}

				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 0.8
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				HERocketEmitterBase : &../../BulletEmitterBase
				{
					Type = BulletEmitter
					Bullet = &<rocket/rocket.rules>
				}

				BulletEmitterLeft : HERocketEmitterBase
				{
					Type = BulletEmitter
					FireTrigger = ShootLeftTrigger
					Location = [1, -0.359375]
				}

				BulletEmitterRight : HERocketEmitterBase
				{
					Type = BulletEmitter
					FireTrigger = ShootRightTrigger
					Location = [1, 0.359375]
				}

				FireEffectLeft
				{
					Type = TriggeredEffects
					ChainedTo = Turret
					Trigger = BulletEmitterLeft
					Location = [0.75, -0.359375]
					AnchorMediaEffects = true

					MediaEffects
					[
						: &<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot.rules>
						{
							Bucket = Upper3
						}

						: &<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>
						{
							EmitterDef : ^/0/EmitterDef
							{
								PreInitializers
								[
									: &<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>/EmitterDef/PreInitializers/0
									{
										Type = SetValue
									}
									: &<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>/EmitterDef/PreInitializers/1
									{
										Type = ScaleFromIntensity
									}
									: &<./Data/ships/terran/missile_launcher/particles/missile_launcher_shoot_flash.rules>/EmitterDef/PreInitializers/2
									{
										Type = SetValue
										Value
										{
											X = 0
											Y = 0
										}
									}
								]
							}
							Bucket = Upper4
						}

						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
							Volume = 1.2
							Delay = 0
							SpeedVariation = .25
						}
					]
				}

				FireEffectRight : FireEffectLeft
				{
					Type = TriggeredEffects
					ChainedTo = Turret
					Trigger = BulletEmitterRight
					Location = [0.75, 0.359375]
				}

				TurretDetailGraphics
				{
					Type = Graphics
					ChainedTo = Turret
					Location = [0, 0]
					Rotation = 90d
					OperationalToggle = IsOperational
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "lights_turret_N.png" //Red lights when active
								Size = [2, 2]
							}
						]
					}
					OperationalRoofDoodad
					{
						Layer = "roof_turrets"
						DamageLevels
						[
							{
								File = "turret_doodads_on_Nrocket.png" //Red lights when active
								Size = [1, 2]
							}
						]
					}
					NonOperationalRoofDoodad
					{
						Layer = "roof_turrets"
						DamageLevels
						[
							{
								File = "turret_doodads_off.png"
								Size = [1, 2]
							}
						]
					}
				}

				LoadedRocketSprites
				{
					Type = ResourceSprites
					ChainedTo = Turret
					Location = [-.5, 0]
					Rotation = 90d
					ResourceStorage = LoadedRockets
					HasZeroResourceSprite = true
					Round = Down
					Layer = "doodads_low"
					ResourceLevels
					[
						{
							File = "N_rocket0.png"
							Size = [2, 1]
						}
						{
							File = "N_rocket1.png"
							Size = [2, 1]
						}
						{
							File = "N_rocket2.png"
							Size = [2, 1]
						}
						{
							File = "N_rocket3.png"
							Size = [2, 1]
						}
						{
							File = "N_rocket4.png"
							Size = [2, 1]
						}
					]
				}
			}
		}

		MicroRocketComponents
		{
			Type = ToggledComponents
			Toggle = MicroRocketToggle
			IncludeInBlueprints = true
			Components
			{
				RocketLoader : &../../HERocketComponents/Components/RocketLoader
				{
					DelayTrigger = Turret
					DelayAfterTrigger = .5
				}

				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 3
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				MicroRocketEmitterBase : &../../BulletEmitterBase
				{
					Type = BulletEmitter
					Bullet = &<micro_rocket/micro_rocket.rules>
					ResourcesUsed = 4
					Burst = 4 //Since there are two emitters, the rocket launcher fires in half bursts.
					BurstDelay = .15
					Recoil = 40
				}

				BulletEmitterLeft : MicroRocketEmitterBase
				{
					Type = BulletEmitter
					FireTrigger = Turret
					Location = [1, -0.359375]
				}

				BulletEmitterRight : MicroRocketEmitterBase
				{
					Type = BulletEmitter
					FireTrigger = Turret
					Location = [1, 0.359375]
				}

				FireEffectLeft : &../../HERocketComponents/Components/FireEffectLeft
				{
					Type = TriggeredEffects
					ChainedTo = Turret
					Trigger = BulletEmitterLeft
					Location = [0.75, -0.359375]
				}

				FireEffectRight : FireEffectLeft
				{
					Type = TriggeredEffects
					ChainedTo = Turret
					Trigger = BulletEmitterRight
					Location = [0.75, 0.359375]
				}

				TurretDetailGraphics
				{
					Type = Graphics
					ChainedTo = Turret
					Location = [0, 0]
					Rotation = 90d
					OperationalToggle = IsOperational
					OperationalLighting
					{
						Layer = "lights_add"
						DamageLevels
						[
							{
								File = "lights_turret_M.png" //Blue lights when active
								Size = [2, 2]
							}
						]
					}
					OperationalRoofDoodad
					{
						Layer = "roof_turrets"
						DamageLevels
						[
							{
								File = "turret_doodads_on_Mrocket.png" //Blue lights when active
								Size = [1, 2]
							}
						]
					}
					NonOperationalRoofDoodad
					{
						Layer = "roof_turrets"
						DamageLevels
						[
							{
								File = "turret_doodads_off.png"
								Size = [1, 2]
							}
						]
					}
				}

				LoadedRocketSprites
				{
					Type = ResourceSprites
					ChainedTo = Turret
					Location = [-.5, 0]
					Rotation = 90d
					ResourceStorage = LoadedRockets
					HasZeroResourceSprite = true
					Layer = "doodads_low"
					ResourceLevels
					[
						{
							File = "M_rocket0.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket1.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket2.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket3.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket4.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket5.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket6.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket7.png"
							Size = [2, 1]
						}
						{
							File = "M_rocket8.png"
							Size = [2, 1]
						}
					]
				}
			}
		}


		CrewLocation1
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-0.625, -.5] //-.5, 0.625
			Rotation = 90d
		}
		CrewLocation2
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-0.625, .5]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [RocketStorage, PowerToggle]
			CrewDestinations
			[
				[1, 2.125]
				[2, 2.125]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		//A lonely old turret graphic
		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "turret.png"
						NormalsFile = "turret_normals.png"
						Size = [3, 3]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 1.5]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 10000
					Radius = 5
					Delay = .05
					DamagesOperationalHealth = true
					DamagesStructuralHealth = false
					AllowFriendlyDamage = true
					FireChancePerNDamage = 50%
					NDamage = 1000
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 3333
					Radius = 4
					Delay = .05
					DamagesOperationalHealth = false
					DamagesStructuralHealth = true
					AllowFriendlyDamage = true
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1.5, 1.5]
					}
				}

				// Out of power.
				{
					Toggle = RocketStorage
					Delay = 6 //I'm hard coding this because it's fairly dumb how much it flickers
					AtlasSprite
					{
						File = &/INDICATORS/NoRockets
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1.5, 1.5]
					}
				}
			]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 3]
		}
	}
	
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		MinCrew = (&CrewRequired) * 2
		RecCrew = (&CrewRequired) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/RocketHE"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDamage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				DamageArea = &~/Part/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Radius
				ROF = 1 / (&~/Part/Components/HERocketComponents/Components/FireTimer/Duration)
				Range = &~/Part/Components/BulletEmitterBase/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				ShotLaunchSpeed = &~/Part/Components/BulletEmitterBase/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
				RocketParts = &~/Part/Components/BulletEmitterBase/ResourcesUsed
			}
		}
		{
			NameKey = "StatCategories/MicroRocket"
			Stats
			{
				DamagePerShot = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDamage
				DamagePerSecond = (&DamagePerShot) * (&ROF) * (&Salvo/0)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				DamageArea = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Radius
				ROF = 1 / (&~/Part/Components/MicroRocketComponents/Components/FireTimer/Duration)
				Salvo = [(&~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Burst) * 2, (&~/Part/Components/MicroRocketComponents/Components/FireTimer/Duration)]
				Range = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				ShotLaunchSpeed = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Bullet/Speed
				ShotHP = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/Bullet/Components/Targetable/Health
				RocketParts = &~/Part/Components/MicroRocketComponents/Components/MicroRocketEmitterBase/ResourcesUsed
			}
		}
	]
}
