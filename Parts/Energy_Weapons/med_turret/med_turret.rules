Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/TurretMed"
	IconNameKey = "Parts/TurretMedIcon"
	ID = ultranova.medium_turret
	OtherIDs = [ultranova.alliance_medium_turret, ultranova.federation_medium_turret]
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/TurretMedDesc"
	Resources
	[
		[steel, 52]
		[coil, 32]
	]
	TypeCategories = [weapon, uses_power, is_crewed]
	Size = [2, 2]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	ForceManhattanPathInPart = true //Makes sure that crew don't walk over the middle guy
	MaxHealth = 4000
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	ProhibitRects
	[
		[tall, [-1, -1, 4, 1]]
		[tall, [-1, 0, 1, 2]]
		[tall, [2, 0, 1, 2]]
	]
	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
		[0, 2]
		[1, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../../Defences/ciws_large/floor.png"
						Size = [2, 2]
					}
					{
						File = "../../Defences/ciws_large/floor_33.png"
						Size = [2, 2]
					}
					{
						File = "../../Defences/ciws_large/floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../../Defences/ciws_large/walls.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		TurretCollider
		{
			Type = CircleCollider
			Location = &../Turret/Location
			Radius = .75
			IsHigh = true
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, 1]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			FireInterval = 0
			FirePermissionToggle = FirePermissionToggle
			FiringArc = 270d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 400
			AutoFireToggle = AutoFireToggle
			IgnoreSourceShipLowLOSChecks = true
			Emitter = BulletEmitterBase

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
			
			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]
		}


		ShootSynchronizedComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Invert = true
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = .75
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootLeftTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}

				ShootRightTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}
			}
		}

		ShootAlternatingComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 0.375
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootCycle
				{
					Type = ModeCycle
					ModeRange = [0, 1]
					IncrementTrigger = Turret
					StartingMode = 1 // First shot will switch to mode 0.
				}

				ShootLeftTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [0]
				}

				ShootRightTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [1]
					OperationalToggle = FireAlternatingToggle
				}
			}
		}

		FireTimerProxy
		{
			Type = ToggleProxy
			ComponentID = FireTimer
		}
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [FireTimerProxy, FireModeToggle]
			Mode = All
		}

		ShootLeftTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootLeftTrigger
		}

		ShootRightTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootRightTrigger
		}

		BulletEmitterBase
		{
			Type = BulletEmitter
			Location = [1, 0]
			ChainedTo = Turret
			FireTrigger//None.
			GetTargetFrom = Turret
			OperationalToggle = IsOperational
			Bullet = &<energy_shot/energy_shot.rules>
			ResourceStorage = BatteryStorage
			ResourcesUsed = 125 
		}

		BulletEmitterLeft : &BulletEmitterBase
		{
			Type = BulletEmitter
			Location = [2, -0.25]
			ChainedTo = Turret
			FireTrigger = ShootLeftTriggerProxy
		}

		BulletEmitterRight : &BulletEmitterBase
		{
			Type = BulletEmitter
			Location = [2, 0.25]
			ChainedTo = Turret
			FireTrigger = ShootRightTriggerProxy
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitterLeft
			Location = [2, -0.25]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot.rules>
				&<./Data/ships/terran/laser_blaster_small/particles/laser_blaster_small_shoot_flash.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/laser_blaster_small/shoot.wav"
					Volume = .6
					Delay = 0
					SpeedVariation = .25
				}
			]
		}

		FireEffectRight : &FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitterRight
			Location = [2, 0.25]
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [-0.125, 0]
			ChainedTo = Turret
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [BatteryStorage, PowerToggle]
			CrewDestinations
			[
				[1, 1.125]
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_floor.png"
						Size = [2, 2]
					}
					{
						File = "turret_floor_33.png"
						Size = [2, 2]
					}
					{
						File = "turret_floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "turret.png"
						NormalsFile = "turret_normals.png"
						Offset = [0, -.5]
						Size = [2, 3]
					}
				]
			}
		}

		BatterySpritesA
		{
			Type = ResourceSprites
			ChainedTo = Turret
			Location = [0, -.5]
			ResourceStorage = BatteryStorage
			Rotation = 90d
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 2000
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		BatterySpritesB
		{
			Type = ResourceSprites
			ChainedTo = Turret
			Location = [0, .5]
			ResourceStorage = BatteryStorage
			Rotation = 90d
			Layer = "doodads_low"
			RangeLow = 2001
			RangeHigh = 4000
			ResourceLevels
			[
				{
					File = "batteries1.png"
					MirrorU = true
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					MirrorU = true
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1.5, 1.5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1.5, 1.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}
	
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		MinPower = (&../StatsByCategory/0/Stats/PowerPerSecond) / 2
		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/FighterWeapons"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 1 / (&~/Part/Components/ShootAlternatingComponents/Components/FireTimer/Duration)
				Range = &~/Part/Components/BulletEmitterBase/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitterBase/Bullet/Speed
				//&~/Part/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitterBase/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}
