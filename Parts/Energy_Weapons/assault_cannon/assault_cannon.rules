Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/AssaultCannon"
	IconNameKey = "Parts/AssaultCannonIcon"
	ID = ultranova.assault_cannon_light
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/AssaultCannonDesc"
	Resources
	[
		[steel, 40]
		[coil, 20]
		[coil2, 10]
	]
	TypeCategories = [weapon, uses_power, is_crewed]
	Size = [2, 5]
	PhysicalRect = [0, 2, 2, 3]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 12000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 4]
		[0, 5]
		[1, 5]
		[2, 4]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [36.8, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 3.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 3]
					}
					{
						File = "floor_33.png"
						Size = [2, 3]
					}
					{
						File = "floor_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 4]
						Offset = [0, -.5]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 4]				
						Offset = [0, -.5]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -.828125]
				DamageLevels
				[
					{
						File = "./Data/ships/terran/laser_blaster_large/light_blob.png"
						Size = [3, 3]
						Z = 1.0 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		Turret
		{
			Type = FixedWeapon
			Location = [1, 2] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 1.5
			FirePermissionToggle = FireModeToggle
			AIFirepowerRating = 1600
			Emitter = BulletEmitter // Doesn't actually fire; only used for targeting.

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = AutoTargetToggle
			}

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [2.4375, 0]
			OperationalToggle = IsOperational
			Bullet = &<cannon_bolt/cannon_bolt.rules>
			FireDelay = .09
			ResourceStorage = BatteryStorage
			ResourcesUsed = 1000
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitter
			Location = [2.4375, 0]
			AnchorMediaEffects = true
			MediaEffects
			[

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/laser_blaster_small/charge.wav"
					Volume = .6
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/laser_blaster_large/shoot.wav"
					Volume = 1
					Delay = .09
					SpeedVariation = .25
				}
			]
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [1, 4.5]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		BarrelSprite
		{
			Type = Sprite
			ChainedTo = Turret
			ResetAnimationTrigger = BulletEmitter
			Location = [1.484375, 0]
			Rotation = 90d
			Layer = "turrets"
			AtlasSprite
			{
				AnimationFiles
				[
					"barrel1.png"
					"barrel2.png"
					"barrel3.png"
					"barrel4.png"
					"barrel5.png"
					"barrel6.png"
					"barrel7.png"
					"barrel8.png"
					"barrel9.png"
					"barrel10.png"
					"barrel1.png"
				]
				NormalsAnimationFiles
				[
					"barrel_normals1.png"
					"barrel_normals2.png"
					"barrel_normals3.png"
					"barrel_normals4.png"
					"barrel_normals5.png"
					"barrel_normals6.png"
					"barrel_normals7.png"
					"barrel_normals8.png"
					"barrel_normals9.png"
					"barrel_normals10.png"
					"barrel_normals1.png"
				]
				Size = [1, 3]
				AnimationInterval = .0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 3.109375]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "../assault_cannon/batteries1.png"
					Size = [1, 1]
				}
				{
					File = "../assault_cannon/batteries2.png"
					Size = [1, 1]
				}
				{
					File = "../assault_cannon/batteries3.png"
					Size = [1, 1]
				}
				{
					File = "../assault_cannon/batteries4.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 3.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1, 3.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 3.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 6]
			Offset = [0, -.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/AssaultCannon"
			Stats
			{
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDamage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				DamageArea = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Radius
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}
