Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/PlasmaThrusterScoreSmall"
	IconNameKey = "Parts/PlasmaThrusterScoreSmallIcon"
	ID = ultranova.plasma_thruster_core_small
	EditorGroup = "Flight"
	DescriptionKey = "Parts/PlasmaThrusterScoreSmallDesc"
	Resources
	[
		[steel, 200]
		[coil2, 50]
		[tristeel, 25]
	]
	TypeCategories = [thruster, uses_power]
	Size = [4, 8]
	PhysicalRect = [0, 0, 4, 6]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "thrusters"
	MaxHealth = 24000
	ProhibitBelow = 16
	ThrusterForce = 36000
	ThrustIncreaseTime = 6
	ThrustRecoveryTime = 2
	FuelUsage = ceil(800 * 1.5)
	BlockedTravelCells
	[
		[1, 1]
		[2, 1]

		[0, 2]
		[0, 3]
		[0, 4]
		[0, 5]

		[1, 2]
		[1, 3]
		[1, 4]
		[1, 5]

		[2, 2]
		[2, 3]
		[2, 4]
		[2, 5]

		[3, 2]
		[3, 3]
		[3, 4]
		[3, 5]
	]
	ForceManhattanPathInPart = true
	AllowedDoorLocations
	[
		[-1, 0]
		[-1, 1]

		[0, -1]
		[1, -1]
		[2, -1]
		[3, -1]

		[4, 0]
		[4, 1]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [53.33, 106.66]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		WindowToggle
		{
			Type = UIToggle
			ToggleID = "windows_on_off"
			Default = 1
			RequiresCommand = false
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 8
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 16000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Thruster_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			Location = [2, 3]
			OperationalToggle = IsOperational
			AnimationSpeedFactor = MainThruster
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				//Offset = [0, 1]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [4, 6]
					}
					{
						File = "floor_33.png"
						Size = [4, 6]
					}
					{
						File = "floor_66.png"
						Size = [4, 6]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [3, 6]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [3, 6]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
						]
						Size = [4, 8]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 6]
					}
				]
			}
			
		}

		RoofDetailed
		{
			Type = ToggledComponents
			Toggle = WindowToggle
			Invert = false
			Components
			{
				RoofGraphics
				{
					Type = Graphics
					OperationalToggle = IsOperational
					Location = [2, 3]
					Roof
					{
						Layer = "roofs"
						DamageLevels
						[
							{
								File = "roof.png"
								NormalsFile = "roof_normals.png"
								Size = [4, 6]
							}
							{
								File = "roof_33.png"
								NormalsFile = "roof_normals_33.png"
								Size = [4, 6]
							}
							{
								File = "roof_66.png"
								NormalsFile = "roof_normals_66.png"
								Size = [4, 6]
							}
						]
					}
					OperationalRoofDoodad
					{
						Layer = "roof_doodads"
						DamageLevels
						[
							{
								File = "roof_glows.png"
								Size = [4, 6]
							}
						]
					}
					OperationalRoofLighting
					{
						Layer = "roof_lights_fancy"
						Offset = [0, 0.5]
						DamageLevels
						[
							{
								File = "./Data/ships/common/light_blob.png"
								Size = [8, 8]
								Z = 2.50 // Controls the "height" of the light for the purposes of normal mapping.
								VertexColor = [0*1.0,255*1.0, 255*1.0]
							}
						]
					}
				}
			}
		}

		RoofUndetailed
		{
			Type = ToggledComponents
			Toggle = WindowToggle
			Invert = true
			Components
			{
				RoofGraphicsPlain
				{
					Type = SpriteGrid
					Location = [.5, .5]
					GridSize = [4, 6]
					RandomDamageLevels
					[
						[
							{
								File = "./Data/ships/terran/corridor/roof.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_33.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_33.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_66.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_66.png"
								Size = [1, 1]
							}
						]
					]
					RandomUVRotation = true
					Layer = "roofs"
				}
			}
		}

		NozzleGraphics
		{
			Type = Graphics
			Location = [2, 7]
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "nozzle.png"
						NormalsFile = "nozzle_normals.png"
						Size = [4, 2]
					}
					{
						File = "nozzle_33.png"
						NormalsFile = "nozzle_normals.png"
						Size = [4, 2]
					}
					{
						File = "nozzle_66.png"
						NormalsFile = "nozzle_normals.png"
						Size = [4, 2]
					}
				]
			}
		}

		BatterySpritesA
		{
			Type = ResourceSprites
			Location = [2, 0.53125]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 8000
			ResourceLevels
			[
				{
					File = "../thruster_plasma_huge/batteries1.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries2.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries3.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries4.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries5.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries6.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries7.png"
					Size = [3, 1]
				}
				{
					File = "../thruster_plasma_huge/batteries8.png"
					Size = [3, 1]
				}
			]
		}

		BatterySpritesB : &BatterySpritesA
		{
			Type = ResourceSprites
			Location = [2, 0.4375]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			RangeLow = 8001
			RangeHigh = 16000
		}

		MainThruster
		{
			Type = Thruster
			Location = [2, 7]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = 1
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		NozzleCollider
		{
			Type = PolygonCollider
			Vertices
			[
				[0.1875, 6]
				[0.5, 7.625]
				[3.5, 7.625]
				[3.8125, 6]
			]
			Density = 1
		}

		ThrustEffects
		{
			Type = ContinuousEffects
			ChainedTo = MainThruster
			Location = [.5, 0]
			FactorMediaEffectsIntensityWith = MainThruster
			MediaEffects
			[
				&<particles/thruster_plume_huge.rules>
				&<particles/thruster_plume_light_huge.rules>
				&<particles/thruster_fire_huge.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .5
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThruster
			MinAmount = .5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThruster
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = MainThruster
			AnchorMediaEffects = true
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .75
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [2, 4]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/HugePartDestroyed
			Location = [2, 4]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [2, 4]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .3
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [4, 8]
		}
	}

	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
	}
}