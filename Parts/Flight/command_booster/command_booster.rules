Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/CommandBooster"
	IconNameKey = "Parts/CommandBoosterIcon"
	ID = ultranova.command_booster
	EditorGroup = "Control"
	DescriptionKey = "Parts/CommandBoosterDesc"
	Resources
	[
		[steel, 16]
		[coil, 6]
		[processor, 2]
	]
	AIValueFactor = 5
	Size = [2, 1]
	SelectionPriority = 0
	MaxHealth = 2000
	ContiguityOriginPriority = 1
	TypeCategories = [command, uses_power, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs [BoosterActivate]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 24]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew, BuffToggle]
			Mode = All
		}

		BuffToggle
		{
			Type = BuffToggle
			BuffType = BoosterActivate
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 1000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			AllowNonContiguousCrewSearch = true
		}

		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 500
			MinFromQuantityForConversion = 1
			Interval = 60 // Drains 1 power every minute.
		}

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 15 // Remember to update tooltip.
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = CommandBoostLimiter
			BuffAmount = 1
			GridDistance = 1
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.5625, 0.5]
			Rotation = 90d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.4375, 0.5]
			Rotation = -90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [BuffToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[0.5625, 0.5]
				[1.4375, 0.5]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
			SwitchLocationInterval = [5, 10]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, .5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 1]
					}
					{
						File = "floor_33.png"
						Size = [2, 1]
					}
					{
						File = "floor_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.125
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [2, 1]
					}
				]
			}

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 1.5 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [36*1.0,105*1.0, 255*1.0]//[50*1.0,100*1.0, 255*1.0]
					}
				]
			}
		}

		Graphics2
		{
			Type = Graphics
			Location = [1, .5]
			OperationalToggle = IsOperational
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/control_room_small/radar.png"
						NormalsFile = "./Data/ships/terran/control_room_small/radar_normals.png"
						RotSpeed = 180d
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/control_room_small/radar.png"
						NormalsFile = "./Data/ships/terran/control_room_small/radar_normals.png"
						Size = [1, 1]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, .5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 1]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuousMinutes = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000 * 60
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerUsageContinuousMinutes) / 60
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}