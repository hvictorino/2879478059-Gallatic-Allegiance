Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/PlasmaThrusterMed"
	IconNameKey = "Parts/PlasmaThrusterMedIcon"
	ID = ultranova.plasma_thruster_med // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [ultranova.ion7_thruster_med]
	EditorGroup = "Flight"
	DescriptionKey = "Parts/PlasmaThrusterMedDesc"
	Resources
	[
		[steel, 32]
		[coil, 12]
	]
	TypeCategories = [thruster, uses_power]
	Size = [1, 3]
	PhysicalRect = [0, 0, 1, 2]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "thrusters"
	MaxHealth = 2000
	ProhibitBelow = 5 + 1
	ThrusterForce = floor(1200 * 1.5)
	ThrustIncreaseTime = { BaseValue=1; BuffType=Engine; BuffMode=Divide; }
	ThrustRecoveryTime = 2
	FuelUsage = ceil(100 * 1.5)
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine, EnginePowerDistribution]
	AllowedDoorLocations
	[
		[-1, 0]
		[0, -1]
		[1, 0]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [21.33, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		WindowToggle
		{
			Type = UIToggle
			ToggleID = "windows_on_off"
			Default = 1
			RequiresCommand = false
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		PowerDistributionBuffToggle
		{
			Type = BuffToggle
			BuffType = EnginePowerDistribution
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = PowerDistributionBuffToggle
			Invert = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			AnimationSpeedFactor = MainThruster
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/thruster_med/floor.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/thruster_med/floor_33.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/thruster_med/floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, .5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights.png"
							"lights2.png"
						]
						Size = [1, 3]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/thruster_med/walls.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/thruster_med/walls_33.png"
						Size = [1, 2]
					}
					{
						File = "./Data/ships/terran/thruster_med/walls_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		RoofDetailed
		{
			Type = ToggledComponents
			Toggle = WindowToggle
			Invert = false
			Components
			{
				RoofGraphics
				{
					Type = Graphics
					OperationalToggle = IsOperational
					Location = [.5, 1]
					Roof
					{
						Layer = "roofs"
						Offset = [0, 0]
						DamageLevels
						[
							{
								File = "roof.png"
								NormalsFile = "roof_normals.png"
								Size = [1, 2]
							}
							{
								File = "roof_33.png"
								NormalsFile = "roof_normals_33.png"
								Size = [1, 2]
							}
							{
								File = "roof_66.png"
								NormalsFile = "roof_normals_66.png"
								Size = [1, 2]
							}
						]
					}
					OperationalRoofDoodad
					{
						Layer = "roof_doodads"
						DamageLevels
						[
							{
								File = "roof_glows.png"
								Size = [1, 2]
							}
						]
					}
					OperationalRoofLighting
					{
						Layer = "roof_lights_fancy"
						Offset = [0, 0.35]
						DamageLevels
						[
							{
								File = "./Data/ships/common/light_blob.png"
								Size = [2.0, 3.5]
								Z = 1.30 // Controls the "height" of the light for the purposes of normal mapping.
								VertexColor = [0*1.0,255*1.0, 255*1.0]
							}
						]
					}
				}
			}
		}

		RoofUndetailed
		{
			Type = ToggledComponents
			Toggle = WindowToggle
			Invert = true
			Components
			{
				RoofGraphicsPlain
				{
					Type = SpriteGrid
					Location = [.5, .5]
					GridSize = [1, 2]
					RandomDamageLevels
					[
						[
							{
								File = "./Data/ships/terran/corridor/roof.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_33.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_33.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_66.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_66.png"
								Size = [1, 1]
							}
						]
					]
					RandomUVRotation = true
					Layer = "roofs"
				}
			}
		}

		NozzleGraphics
		{
			Type = Graphics
			Location = [.5, 2.5]
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "nozzle.png"
						NormalsFile = "nozzle_normals.png"
						Size = [1, 1]
					}
					{
						File = "nozzle_33.png"
						NormalsFile = "nozzle_normals.png"
						Size = [1, 1]
					}
					{
						File = "nozzle_66.png"
						NormalsFile = "nozzle_normals.png"
						Size = [1, 1]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "./Data/ships/terran/thruster_med/batteries1.png"
					Size = [1, 1]
				}
				{
					File = "./Data/ships/terran/thruster_med/batteries2.png"
					Size = [1, 1]
				}
			]
		}

		MainThruster
		{
			Type = Thruster
			Location = [0.5, 2.5]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		NozzleCollider
		{
			Type = PolygonCollider
			Vertices
			[
				[.05, 2]
				[.95, 2]
				[.8, 2.6]
				[.2, 2.6]
			]
			Density = 1
		}

		ThrustEffects
		{
			Type = ContinuousEffects
			ChainedTo = MainThruster
			Location = [6/64, 0]
			FactorMediaEffectsIntensityWith = MainThruster
			MediaEffects
			[
				&<particles/thruster_plume_med.rules>
				&<particles/thruster_plume_light_med.rules>
				&<particles/thruster_fire_med.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .125
					Speed = 1.5
					MaxConcurrentVolume = .25
				}
			]
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThruster
			MinAmount = .5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThruster
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = MainThruster
			AnchorMediaEffects = true
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .25
					Speed = 1.5
					MaxConcurrentVolume = .5
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [.5, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .1
					Speed = 1.25
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 3]
		}
	}

	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime/BaseValue
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
	}
}